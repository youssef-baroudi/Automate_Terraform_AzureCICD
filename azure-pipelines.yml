# Starter pipeline

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  subscription: 
  resourceGroup : RG_App1_UAT
  storageAccount : SA_App1_UAT
  container: Container_Tfstate_App1_UAT
  tfStateFile : terraform.tfstate
  anyTFChanges : false

stages:
- stage: UAT_Terraform_Installation
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'

      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendType: 'azurerm'
          backendServiceArm: '$(subscription)'
          backendAzureRmResourceGroupName: '$(resourceGroup)'
          backendAzureRmStorageAccountName: '$(storageAccount)'
          backendAzureRmContainerName: '$(container)'
          backendAzureRmKey: '$(tfStateFile)'
          allowTelemetryCollection: false

      - task: TerraformCLI@0
        displayName: Terraform Plan -out=tfplan
        inputs:
          command: 'plan'
          commandOptions: '-out=tfplan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendType: 'azurerm'
          backendServiceArm: '$(subscription)'
          allowTelemetryCollection: false
	
      - task: PowerShell@2
	displayName: detect any terraform change
	inputs:
	  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
	  targetType: 'inline'
    	  script: 

      - task: TerraformCLI@0
        displayName: Terraform Apply tfplan
	condition: eq(variables.anyTFChanges,true)
        inputs:
          command: 'apply'
          commandOptions: 'tfplan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendType: 'azurerm'
          backendServiceArm: '$(subscription)'
          allowTelemetryCollection: false  
